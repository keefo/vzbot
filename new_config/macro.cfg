# [delayed_gcode delayed_exhaust_fan_off]
# gcode:
#     SET_FAN_SPEED FAN=Exhaust_fan SPEED=0.0
# # Delay for 600 seconds (10 minutes)
# initial_duration: 600

# [gcode_macro CLEAN_NOZZLE]
# gcode:
#     RESPOND MSG="clean nozzle"
#     G91  ; Relative positioning
#     G1 Z2 F500  ; Lift Z-axis to avoid collision
#     G90  ; Absolute positioning
#     G1 Z21 F2400
#     G1 X11 Y20 F3000  ; Move to starting brush position
#     G1 X19 Y70 F9500  ; Move to end brush position
#     G1 X11 Y20 F9500  ; Move back to start brush position
#     G1 X19 Y70 F9500  ; Repeat brush motion
#     G1 X11 Y20 F9500
#     G1 X19 Y70 F9500
#     G91  ; Relative positioning
#     G1 Z5  F1000
#     G1 Y10 F1000
#     G90  ; Absolute positioning
#     G1 X5 Y5 Z2 F3000  ; Move back to home or another safe position (adjust as needed)
[gcode_macro RESPOND]
rename_existing: RESPOND_ORIG
# toggle speaking without removing the macro
variable_speak_enable: 1
gcode:
  {% set msg = params.MSG|default("") %}
  {% set type = params.TYPE|default("") %}
  {% set prefix = params.PREFIX|default("") %}

  # Pass through to the original RESPOND (preserves behavior)
  RESPOND_ORIG {% if type %}TYPE={type}{% endif %} {% if prefix %}PREFIX={prefix}{% endif %} MSG="{msg}"

  # Also speak it (if enabled)
  {% if printer["gcode_macro RESPOND"].speak_enable|int %}
    # Basic sanitizing to avoid quote issues
    {% set speak_msg = msg|replace('"','') %}
    SPEAK MSG="{speak_msg}"
  {% endif %}

[gcode_macro PRINT_START]
gcode:
    {% set BED_TEMP = params.BED_TEMP|default(100)|float %}
    {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(190)|float %}
    {% set Z_OFFSET = params.Z_OFFSET|default(0)|float %}
    {% set MAX_WAIT = params.MAX_WAIT|default(0)|int %}
    {% set BED_SOAK_TIME = params.BED_SOAK_TIME|default(180)|int %}  # Default 2-minute soak for cold bed
    {% set COLD_BED_THRESHOLD = 40 %}  # Bed is "cold" if below 40°C
    {% set HOT_BED_SOAK_TIME = 0 %}   # Short soak time (1 minute) for hot bed
    # {% set HIGH_BED_TEMP = 110 %}      # Higher temp for cold bed heating

    # Get the current bed and chamber temperatures
    {% set current_bed_temp = printer['temperature_sensor bed'].temperature|float|round(1) if 'temperature_sensor bed' in printer 
             else printer.heater_bed.temperature|float|round(1) %}
    {% set current_chamber_temp = printer['temperature_sensor chamber'].temperature|float|round(1) if 'temperature_sensor chamber' in printer 
             else 25.0 %}  # Assume 25°C if no chamber sensor

    # Determine bed sensor for TEMPERATURE_WAIT
    {% set bed_sensor = 'temperature_sensor bed' if 'temperature_sensor bed' in printer else 'heater_bed' %}

    # Determine target bed temperature and soak time
    {% if current_bed_temp < COLD_BED_THRESHOLD or current_chamber_temp < 32 %}
      {% set TARGET_BED_TEMP = BED_TEMP %}
      {% set SOAK_TIME = BED_SOAK_TIME %}
      {% set COOL_DOWN = true %}
    {% else %}
      {% set TARGET_BED_TEMP = BED_TEMP %}
      {% set SOAK_TIME = HOT_BED_SOAK_TIME %}
      {% set COOL_DOWN = false %}
    {% endif %}

    # Reset extruder multiplier
    M221 S100
    
    # Home axes and position for heat soak
    G28          ; home axes
    G0 Z10       ; move to Z=10mm for heat soak (safe height)
    G0 X20 Y20   ; move to safe position

    # Send status messages
    RESPOND MSG="Current chamber temp: {current_chamber_temp}℃"
    RESPOND MSG="Current bed temp: {current_bed_temp}℃"
    RESPOND MSG="Target bed temp: {BED_TEMP}℃"
    RESPOND MSG="Heating bed to: {TARGET_BED_TEMP}℃"
    RESPOND MSG="Heating hotend to: {EXTRUDER_TEMP}℃"
    
    # Start chamber fan
    SET_FAN_SPEED FAN=Exhaust_fan SPEED=1.0
    # SET_FAN_SPEED FAN=Bed_bottom_fan SPEED=1.0
    
    # Heat bed to target temperature
    M190 S{TARGET_BED_TEMP|int}
    
    # If bed was cold, wait for it to cool to BED_TEMP and soak
    {% if SOAK_TIME > 0 %}
      {% if COOL_DOWN %}
        RESPOND MSG="Bed heated to {TARGET_BED_TEMP}℃. Cooling to {BED_TEMP}℃ and soaking for {SOAK_TIME} seconds."
        G4 S{SOAK_TIME|int}  ; Additional soak time after cooling
        RESPOND MSG="Soaking finished."
        M190 S{BED_TEMP|int}
      {% else %}
        RESPOND MSG="Bed already hot. Soaking for {SOAK_TIME} seconds."
        G4 S{SOAK_TIME|int}  ; Short soak for hot bed
        RESPOND MSG="Soaking finished."
      {% endif %}
    {% endif %}
    
    # Heat extruder
    M109 S{EXTRUDER_TEMP}

    # Wait additional time if specified
    {% if MAX_WAIT > 0 %}
      RESPOND MSG="Wait {MAX_WAIT} seconds."
      G4 S{MAX_WAIT|int}
    {% endif %}

    # SET_FAN_SPEED FAN=Bed_bottom_fan SPEED=0.0
    # Bed mesh and calibration
    BED_MESH_CLEAR
    BED_MESH_PROFILE LOAD="default"
    G28 Z METHOD=CONTACT CALIBRATE=0
    RESPOND MSG="Applying Z_OFFSET: {Z_OFFSET}mm"
    SET_GCODE_OFFSET Z={Z_OFFSET}

    # Prepare for printing
    Smart_Park
    RESPOND MSG="Draw adaptive purge line"
    VORON_PURGE
    
    RESPOND MSG="Printing start."

    
# [gcode_macro PRINT_START]
# gcode:
#     {% set BED_TEMP = params.BED_TEMP|default(100)|float %}
#     {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(190)|float %}
#     {% set Z_OFFSET = params.Z_OFFSET|default(0)|float %}
#     {% set max_wait_seconds = params.MAX_WAIT|default(20)|int %}  # Default to 5 minutes if not specified

#     # Get the current bed temperature
#     {% set current_bed_temp = printer['temperature_sensor bed'].temperature|float|round(1) if 'temperature_sensor bed' in printer 
#              else printer.heater_bed.temperature|float|round(1) %} ; get actual temp from extra sensor or heater sensor
#     {% set current_chamber_temp = printer['temperature_sensor chamber'].temperature|float|round(1) %} 
    
#     {% if current_bed_temp < 34 %}
#       {% set HI_BED_TEMP = 110 %}
#     {% endif %}

#     {% if current_chamber_temp < 32 %}
#       {% set HI_BED_TEMP = 110 %}
#     {% endif %}
    
#     {% if current_chamber_temp > 40 %}
#       {% set HI_BED_TEMP = BED_TEMP %}
#     {% endif %}

#     # reset extruder multipler
#     M221 S100
    
#     # EXCLUDE_OBJECT_DEFINE
    
#     G28          ; home axes
#     G0 Z2        ; position beacon at 2mm for heat soak
#     G0 X20 Y20

#     RESPOND MSG="Current chamber temp: {current_chamber_temp}℃"
#     RESPOND MSG="Current bed temp: {current_bed_temp}℃"
#     RESPOND MSG="Heating bed temp: {BED_TEMP}℃"
#     RESPOND MSG="Heating hotend temp: {EXTRUDER_TEMP}℃"
    
#     # start chamber fan
#     SET_FAN_SPEED FAN=Exhaust_fan SPEED=1.0
    
#     # Set and wait for nozzle to reach temperature
#     M190 S{BED_TEMP|int}
#     M109 S{EXTRUDER_TEMP}

#     # RESPOND MSG="Wait chamber temp to reach: 38℃..."
#     # TEMPERATURE_WAIT SENSOR='temperature_sensor chamber' MINIMUM=35 MAXIMUM=50; 
#     # RESPOND MSG="Chamber temp reach: 38℃"
#     RESPOND MSG="Wait {max_wait_seconds} seconds."
#     G4 PS{max_wait_seconds*1000|int}

#     BED_MESH_CLEAR
#     BED_MESH_PROFILE LOAD="default"

#     G28 Z METHOD=CONTACT CALIBRATE=0
#     #BED_MESH_CALIBRATE RUNS=2           ; bed mesh in scan mode
#     #G28 Z METHOD=CONTACT CALIBRATE=0    ; calibrate z offset only after tilt/mesh

#     # BED_MESH_CALIBRATE ADAPTIVE=1
#     # BED_MESH_CALIBRATE
#     # G1 X10 Y10 Z3.0 F3000
#     SET_GCODE_OFFSET Z={Z_OFFSET}

#     Smart_Park
#     # RESPOND MSG="Poop..."
#     # G1 Z21.0 F600
#     # G92 E0 
#     # G1 E25 F1200.0 ; poop
#     # CLEAN_NOZZLE

#     RESPOND MSG="Draw adaptive purge line"
#     # LINE_PURGE
#     VORON_PURGE
    
#     RESPOND MSG="Printing start."

[gcode_macro PRINT_END]
gcode:
  # --- Bounds & current pos ---
  {% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}
  {% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}
  {% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}
  {% set cur = printer.toolhead.position %}
  {% set display_z = [300.0, max_z]|min %}

  # Safe directions for a short wipe move
  {% set x_safe = 10.0 if cur.x < (max_x - 15.0) else -10.0 %}
  {% set y_safe = 10.0 if cur.y < (max_y - 15.0) else -10.0 %}

  # How much we still need to climb to the display height; hop at least 5 mm now
  {% set z_gap = (display_z - cur.z) if (display_z - cur.z) > 0 else 0.0 %}
  {% set z_hop = [z_gap, 5.0]|max %}

  M400
  G92 E0
  G91                                  ; relative

  # Wipe while retracting (total ~10 mm) — reduces tails a lot
  G1 E-1.0 F4800
  G1 X{x_safe} Y{y_safe} E-9.0 F9000   ; short wipe + retract

  # Fast Z hop (was F300 before = too slow)
  G1 Z{z_hop} F1800                    ; 30 mm/s (limit by your max_z_velocity)

  G90                                  ; absolute
  G0 X{max_x/2.0} Y{max_y - 5.0} F15000 ; quick park travel (limit by your VELOCITY)
  G0 Z{display_z} F1800                ; raise to display height

  M104 S0
  M140 S0
  M107
  M84

  SET_FAN_SPEED FAN=RSCS SPEED=0
  RESPOND MSG="Finished!"

# [gcode_macro spin_one_stepper]
# gcode:
#   {% set stepper = params.STEPPER|string %}
#   {% set velocity = params.VELOCITY|int %}
#   {% set distance = params.DISTANCE|int %}
#   {% set num = params.NUM|default(30)|int %}

#   RESPOND MSG="Spin {stepper} {distance}mm 30 times using velocity = {velocity}"  # Output the selected velocity for confirmation
#   G91

#   {% for i in range(num) %}
#     # Move forward
#     FORCE_MOVE STEPPER={stepper} DISTANCE={distance} VELOCITY={velocity}
#     # Move backward
#     FORCE_MOVE STEPPER={stepper} DISTANCE=-{distance} VELOCITY={velocity}
#   {% endfor %}
#   G90


[gcode_macro TEST_Z_MOVE]
gcode:
  RESPOND MSG="Moving head to center"
  G1 X150 Y20 F6000  ; Move head to center position
  RESPOND MSG="Moving start"
  {% for j in range(12) %}
    G4 P1000  ; Pause for 1 second
    RESPOND MSG="Moving at F{ 100 + 100 * j }"
    G1 Z{ 20 * j + 20 } F{ 100 + 100 * j }
  {% endfor %}
  G1 Z10 F1200
  RESPOND MSG="Done"
  
[gcode_macro M117]
rename_existing: M117.1
gcode:
  {% if rawparams %}
    {% set escaped_msg = rawparams.split(';', 1)[0].split('\x23', 1)[0]|replace('"', '\\"') %}
    SET_DISPLAY_TEXT MSG="{escaped_msg}"
    RESPOND TYPE=command MSG="{escaped_msg}"
  {% else %}
    SET_DISPLAY_TEXT
  {% endif %}

[gcode_macro CANCEL_PRINT]
rename_existing: BASE_CANCEL_PRINT
gcode:
    TURN_OFF_HEATERS
    # Lift the Z-axis by 10mm
    G91                     ; Set to relative positioning
    G1 Z45 F6000            ; Move Z axis up by 10mm at a fast speed
    G90                     ; Set back to absolute positioning
    G1 X120 Y270 F1000      ; move head to back
    CLEAR_PAUSE
    M106 S0                 ; stop fan
    # SDCARD_RESET_FILE
    BASE_CANCEL_PRINT

# [gcode_macro MOVE_X_1]
# gcode:
#   FORCE_MOVE STEPPER=stepper_x DISTANCE=1 VELOCITY=10
#   FORCE_MOVE STEPPER=stepper_x1 DISTANCE=1 VELOCITY=10

# [gcode_macro MOVE_X_n1]
# gcode:
#   FORCE_MOVE STEPPER=stepper_x DISTANCE=-1 VELOCITY=10
#   FORCE_MOVE STEPPER=stepper_x1 DISTANCE=-1 VELOCITY=10

# [gcode_macro MOVE_X_5]
# gcode:
#   FORCE_MOVE STEPPER=stepper_x DISTANCE=5 VELOCITY=10
#   FORCE_MOVE STEPPER=stepper_x1 DISTANCE=5 VELOCITY=10

# [gcode_macro MOVE_X_n5]
# gcode:
#   FORCE_MOVE STEPPER=stepper_x DISTANCE=-5 VELOCITY=10
#   FORCE_MOVE STEPPER=stepper_x1 DISTANCE=-5 VELOCITY=10


# [gcode_macro MOVE_Y_1]
# gcode:
#   FORCE_MOVE STEPPER=stepper_y DISTANCE=1 VELOCITY=10
#   FORCE_MOVE STEPPER=stepper_y1 DISTANCE=1 VELOCITY=10

# [gcode_macro MOVE_Y_n1]
# gcode:
#   FORCE_MOVE STEPPER=stepper_y DISTANCE=-1 VELOCITY=10
#   FORCE_MOVE STEPPER=stepper_y1 DISTANCE=-1 VELOCITY=10

# [gcode_macro MOVE_Y_5]
# gcode:
#   FORCE_MOVE STEPPER=stepper_y DISTANCE=5 VELOCITY=10
#   FORCE_MOVE STEPPER=stepper_y1 DISTANCE=5 VELOCITY=10

# [gcode_macro MOVE_Y_n5]
# gcode:
#   FORCE_MOVE STEPPER=stepper_y DISTANCE=-5 VELOCITY=10
#   FORCE_MOVE STEPPER=stepper_y1 DISTANCE=-5 VELOCITY=10

[gcode_macro DUMP_POSITION]
gcode:
    GET_POSITION

[gcode_macro LOAD_FILAMENT]
variable_load_distance:  50
variable_purge_distance:  25
gcode:
    {% set speed = params.SPEED|default(300) %}
    {% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity  * 60 %}
    SAVE_GCODE_STATE NAME=load_state
    G91
    G92 E0
    G1 E{load_distance} F{max_velocity} # fast-load
    G1 E{purge_distance} F{speed} # purge
    RESTORE_GCODE_STATE NAME=load_state

[gcode_macro LOAD_FILAMENT]
variable_load_distance:  50
variable_purge_distance:  25
gcode:
    {% set speed = params.SPEED|default(300) %}
    {% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity  * 60 %}
    SAVE_GCODE_STATE NAME=load_state
    G91
    G92 E0
    G1 E{load_distance} F{max_velocity} # fast-load
    G1 E{purge_distance} F{speed} # purge
    RESTORE_GCODE_STATE NAME=load_state


[gcode_macro M900]
gcode:
	# Parameters
	{% set pa = params.K|float %}
	SET_PRESSURE_ADVANCE ADVANCE={pa}

[gcode_macro Disable_Steppers]
gcode:
    M84

[gcode_macro RETRACTION_UP]
gcode:
    {% set CRLEN = printer.firmware_retraction.retract_length|float %}
    {% set NRLEN = CRLEN|float + 0.1 %}
    { action_respond_info("current retract_length %.2f, new retract_length %.2f" % (CRLEN, NRLEN))  }
    SET_RETRACTION RETRACT_LENGTH={NRLEN}    

[gcode_macro RETRACTION_DOWN]
gcode:
    {% set CRLEN = printer.firmware_retraction.retract_length|float %}
    {% set NRLEN = CRLEN|float - 0.1 %}
    { action_respond_info("current retract_length %.2f, new retract_length %.2f" % (CRLEN, NRLEN))  }
    SET_RETRACTION RETRACT_LENGTH={NRLEN}   


[gcode_macro SET_RETRACTIONLENGTH]
gcode:
  SET_RETRACTION RETRACT_LENGTH={params.LENGTH|float}
  GET_RETRACTION


[gcode_macro PID_CALIBRATE_EXTRUDER]
gcode:
  PID_CALIBRATE HEATER=extruder TARGET=170

[gcode_macro PID_CALIBRATE_BED]
gcode:
  PID_CALIBRATE HEATER=heater_bed TARGET=68
  
# [gcode_macro PID_Calibrate_dropdown]
# gcode:
#     {% set heater = params.HEATER|string %}
#     {% set target = params.TARGET|int %}
#     PID_CALIBRATE HEATER={heater} TARGET={target}

[gcode_macro exhaustfan_on]
gcode: 
	SET_FAN_SPEED FAN=Exhaust_fan SPEED=1
###	
	
[gcode_macro exhaustfan_off]
gcode: 
	SET_FAN_SPEED FAN=Exhaust_fan SPEED=0
	
	
###		
	
[gcode_macro enclosurefan_on]
gcode: 
	SET_FAN_SPEED FAN=chamber_fan SPEED=1

###			
	
[gcode_macro enclosurefan_off]
gcode: 
	SET_FAN_SPEED FAN=chamber_fan SPEED=0


[gcode_macro RSCS_on]
gcode: 
	SET_FAN_SPEED FAN=RSCS SPEED=1
###	
	

[gcode_macro RSCS_off]
gcode: 
	SET_FAN_SPEED FAN=RSCS SPEED=0
		
###

# [gcode_macro LED_on]
# gcode:
# 	SET_PIN PIN=LED value=1   


# [gcode_macro LED_off]
# gcode:
# 	SET_PIN PIN=LED value=0  

###	

[gcode_macro PA_tunning]
gcode: 
	SET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY=1 ACCEL=500
	TUNING_TOWER COMMAND=SET_PRESSURE_ADVANCE PARAMETER=ADVANCE START=0 FACTOR=.005

# [gcode_macro TEST_RESONNANCES_X]
# gcode:
#  TEST_RESONANCES AXIS=X


# [gcode_macro TEST_RESONNANCES_Y]
# gcode:
#  TEST_RESONANCES AXIS=Y

[gcode_macro Automatic_Inputshaper]
gcode:
  SHAPER_CALIBRATE
  Save_config

# [gcode_macro Hold_Resonance.]
# gcode:
#   # Axis
#   {% set axis = params.AXIS|string %}
#   # Seconds
#   {% set seconds = params.SECONDS|int %}
#   #Freq
#   {%set int = params.FREQ| int%}
#   HOLD_RESONANCE {rawparams}

[gcode_macro DUMP_WARNINGS]
description: Debug: Print all warning messages from klipper
gcode:
  {% set parameters = ["printer.configfile.warnings:"] %}
  {% for warning in printer.configfile.warnings %}
      {% set parameters = parameters.append("%s -> %s -> %s\n%s" % (warning.type, warning.section, warning.option, warning.message)) %}
  {% endfor %}
  {action_respond_info(parameters|join("\n"))}


[gcode_macro enable_stepper]
gcode:
 SET_STEPPER_ENABLE STEPPER=stepper_x ENABLE=1
 SET_STEPPER_ENABLE STEPPER=stepper_x1 ENABLE=1
 SET_STEPPER_ENABLE STEPPER=stepper_y ENABLE=1
 SET_STEPPER_ENABLE STEPPER=stepper_y1 ENABLE=1


[gcode_macro buzz_stepper_x]
gcode:
  STEPPER_BUZZ stepper=stepper_x

[gcode_macro buzz_stepper_x1]
gcode:
  STEPPER_BUZZ stepper=stepper_x1

[gcode_macro buzz_stepper_y]
gcode:
  STEPPER_BUZZ stepper=stepper_y

[gcode_macro buzz_stepper_y1]
gcode:
  STEPPER_BUZZ stepper=stepper_y1

[gcode_macro Sensorless_homing_Test]
gcode:
    {% set stepper = params.STEPPER|string %}
    {% set Value = params.VALUE|int %}
    SET_TMC_FIELD STEPPER={axis} FIELD=sgt VALUE={VALUE}

[gcode_macro SET_DAY_MODE]
gcode:
    SWITCH_CONFIG CONFIG=day

[gcode_macro SET_NIGHT_MODE]
gcode:
    SWITCH_CONFIG CONFIG=night

[gcode_macro TOGGLE_CONFIG]
gcode:
    SWITCH_CONFIG

[gcode_macro CHECK_MODE]
gcode:
    CHECK_CONFIG




[gcode_macro TEST_MOTOR_NOISE]
variable_homed: 0
gcode:
    G28
    
    G91  ; Relative positioning
    G1 Z25 F600  ; Move Z to 25mm at a speed of 600 mm/min
    G90  ; Absolute positioning
    
    ; Define the center position
    {% set center_x = 150 %}
    {% set center_y = 150 %}
    {% set box_size = 100 %}
    
    ; Define the box corners
    {% set x_start = center_x - box_size / 2 %}
    {% set y_start = center_y - box_size / 2 %}
    {% set x_end = center_x + box_size / 2 %}
    {% set y_end = center_y + box_size / 2 %}
    
    ; Draw box with varying speeds
    ; Box coordinates: (x_start, y_start) to (x_end, y_end)

    ; Pass 1 at speed 500
    G1 X{x_start} Y{y_start} F500
    G1 X{x_end} Y{y_start} F500
    G1 X{x_end} Y{y_end} F500
    G1 X{x_start} Y{y_end} F500
    G1 X{x_start} Y{y_start} F500

    ; Pass 2 at speed 1000
    G1 X{x_end} Y{y_start} F1000
    G1 X{x_end} Y{y_end} F1000
    G1 X{x_start} Y{y_end} F1000
    G1 X{x_start} Y{y_start} F1000

    ; Pass 3 at speed 2000
    G1 X{x_end} Y{y_start} F2000
    G1 X{x_end} Y{y_end} F2000
    G1 X{x_start} Y{y_end} F2000
    G1 X{x_start} Y{y_start} F2000

    ; Pass 4 at speed 3000
    G1 X{x_end} Y{y_start} F3000
    G1 X{x_end} Y{y_end} F3000
    G1 X{x_start} Y{y_end} F3000
    G1 X{x_start} Y{y_start} F3000

    ; Pass 5 at speed 4000
    G1 X{x_end} Y{y_start} F4000
    G1 X{x_end} Y{y_end} F4000
    G1 X{x_start} Y{y_end} F4000
    G1 X{x_start} Y{y_start} F4000

    ; Pass 6 at speed 5000
    G1 X{x_end} Y{y_start} F5000
    G1 X{x_end} Y{y_end} F5000
    G1 X{x_start} Y{y_end} F5000
    G1 X{x_start} Y{y_start} F5000

    ; Pass 7 at speed 6000
    G1 X{x_end} Y{y_start} F6000
    G1 X{x_end} Y{y_end} F6000
    G1 X{x_start} Y{y_end} F6000
    G1 X{x_start} Y{y_start} F6000

    ; Pass 8 at speed 7000
    G1 X{x_end} Y{y_start} F7000
    G1 X{x_end} Y{y_end} F7000
    G1 X{x_start} Y{y_end} F7000
    G1 X{x_start} Y{y_start} F7000

    ; Pass 9 at speed 8000
    G1 X{x_end} Y{y_start} F8000
    G1 X{x_end} Y{y_end} F8000
    G1 X{x_start} Y{y_end} F8000
    G1 X{x_start} Y{y_start} F8000

    ; Pass 10 at speed 9000
    G1 X{x_end} Y{y_start} F9000
    G1 X{x_end} Y{y_end} F9000
    G1 X{x_start} Y{y_end} F9000
    G1 X{x_start} Y{y_start} F9000

    ; Pass 11 at speed 10000
    G1 X{x_end} Y{y_start} F10000
    G1 X{x_end} Y{y_end} F10000
    G1 X{x_start} Y{y_end} F10000
    G1 X{x_start} Y{y_start} F10000

    ; Pass 12 at speed 11000
    G1 X{x_end} Y{y_start} F11000
    G1 X{x_end} Y{y_end} F11000
    G1 X{x_start} Y{y_end} F11000
    G1 X{x_start} Y{y_start} F11000

    ; Pass 13 at speed 12000
    G1 X{x_end} Y{y_start} F12000
    G1 X{x_end} Y{y_end} F12000
    G1 X{x_start} Y{y_end} F12000
    G1 X{x_start} Y{y_start} F12000

    ; Pass 14 at speed 13000
    G1 X{x_end} Y{y_start} F13000
    G1 X{x_end} Y{y_end} F13000
    G1 X{x_start} Y{y_end} F13000
    G1 X{x_start} Y{y_start} F13000

    ; Pass 15 at speed 14000
    G1 X{x_end} Y{y_start} F14000
    G1 X{x_end} Y{y_end} F14000
    G1 X{x_start} Y{y_end} F14000
    G1 X{x_start} Y{y_start} F14000

    ; Pass 16 at speed 15000
    G1 X{x_end} Y{y_start} F15000
    G1 X{x_end} Y{y_end} F15000
    G1 X{x_start} Y{y_end} F15000
    G1 X{x_start} Y{y_start} F15000

    ; Pass 17 at speed 16000
    G1 X{x_end} Y{y_start} F16000
    G1 X{x_end} Y{y_end} F16000
    G1 X{x_start} Y{y_end} F16000
    G1 X{x_start} Y{y_start} F16000

    ; Pass 18 at speed 17000
    G1 X{x_end} Y{y_start} F17000
    G1 X{x_end} Y{y_end} F17000
    G1 X{x_start} Y{y_end} F17000
    G1 X{x_start} Y{y_start} F17000

    ; Pass 19 at speed 18000
    G1 X{x_end} Y{y_start} F18000
    G1 X{x_end} Y{y_end} F18000
    G1 X{x_start} Y{y_end} F18000
    G1 X{x_start} Y{y_start} F18000
    
    M117 Test complete


# Home, get position, throw around toolhead, home again.
# If MCU stepper positions (first line in GET_POSITION) are greater than a full step different (your number of microsteps), then skipping occured.
# We only measure to a full step to accomodate for endstop variance.
# Example: TEST_SPEED SPEED=300 ACCEL=5000 ITERATIONS=10

[gcode_macro TEST_SPEED]
gcode:
	# Speed
	{% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}
	# Iterations
	{% set iterations = params.ITERATIONS|default(5)|int %}
	# Acceleration
	{% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}
	# Bounding inset for large pattern (helps prevent slamming the toolhead into the sides after small skips, and helps to account for machines with imperfectly set dimensions)
	{% set bound = params.BOUND|default(20)|int %}
	# Size for small pattern box
	{% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}
	
	# Large pattern
		# Max positions, inset by BOUND
		{% set x_min = printer.toolhead.axis_minimum.x + bound %}
		{% set x_max = printer.toolhead.axis_maximum.x - bound %}
		{% set y_min = printer.toolhead.axis_minimum.y + bound %}
		{% set y_max = printer.toolhead.axis_maximum.y - bound %}
	
	# Small pattern at center
		# Find X/Y center point
		{% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}
		{% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}
		
		# Set small pattern box around center point
		{% set x_center_min = x_center - (smallpatternsize/2) %}
		{% set x_center_max = x_center + (smallpatternsize/2) %}
		{% set y_center_min = y_center - (smallpatternsize/2) %}
		{% set y_center_max = y_center + (smallpatternsize/2) %}

	# Save current gcode state (absolute/relative, etc)
	SAVE_GCODE_STATE NAME=TEST_SPEED
	
	# Output parameters to g-code terminal
	{ action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }
	
	# Set new limits
	SET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}

    #Home
    #G28

	# Go to starting position
	G0 X{x_min+10} Y{y_min+10} Z{bound + 20} F{speed*60}

	{% for i in range(iterations) %}
		# Large pattern
			# Diagonals
			G0 X{x_min+10} Y{y_min+10} F{speed*60}
			G0 X{x_max-30} Y{y_max-30} F{speed*60}
			G0 X{x_min+10} Y{y_min+10} F{speed*60}
			G0 X{x_max-30} Y{y_max-30} F{speed*60}
			G0 X{x_min+10} Y{y_min+10} F{speed*60}
			G0 X{x_max-30} Y{y_max-30} F{speed*60}
			
			# Box
			G0 X{x_min+10} Y{y_min+10} F{speed*60}
			G0 X{x_min+10} Y{y_max-30} F{speed*60}
			G0 X{x_max-30} Y{y_max-30} F{speed*60}
			G0 X{x_max-30} Y{y_min+10} F{speed*60}
		
		# Small pattern
			# Small diagonals 
			G0 X{x_center_min} Y{y_center_min} F{speed*60}
			G0 X{x_center_max} Y{y_center_max} F{speed*60}
			G0 X{x_center_min} Y{y_center_min} F{speed*60}
			G0 X{x_center_max} Y{y_center_min} F{speed*60}
			G0 X{x_center_min} Y{y_center_max} F{speed*60}
			G0 X{x_center_max} Y{y_center_min} F{speed*60}
			
			# Small box
			G0 X{x_center_min} Y{y_center_min} F{speed*60}
			G0 X{x_center_min} Y{y_center_max} F{speed*60}
			G0 X{x_center_max} Y{y_center_max} F{speed*60}
			G0 X{x_center_max} Y{y_center_min} F{speed*60}
	{% endfor %}

	# Restore max speed/accel/accel_to_decel to their configured values
	SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel} 
	# Restore previous gcode state (absolute/relative, etc)
	RESTORE_GCODE_STATE NAME=TEST_SPEED
    G0 X115 Y115 Z30

[gcode_macro M600]
gcode:
    PAUSE
    SPEAK MSG="PAUSE. PAUSE. PAUSE."

[gcode_macro M601]
gcode:
    PAUSE
    SPEAK MSG="PAUSE. PAUSE. PAUSE."
    